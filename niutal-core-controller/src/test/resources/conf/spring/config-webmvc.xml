<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
	default-lazy-init="true">
	
	<description>Spring MVC Configuration</description>
	
	<!-- ###########Spring MVC 请求和响应处理########### -->
	
	<!-- 
		
		HttpMessageConverter请求信息转换器简介：
 
	　　	HttpMessageConverter接口指定了一个可以把Http request信息和Http response信息进行格式转换的转换器。通常实现HttpMessageConverter接口的转换器有以下几种：
		
		1、ByteArrayHttpMessageConverter			：   负责读取二进制格式的数据和写出二进制格式的数据；
		2、StringHttpMessageConverter			：   负责读取字符串格式的数据和写出二进制格式的数据；
		3、ResourceHttpMessageConverter			：   负责读取资源文件和写出资源文件数据； 
		4、FormHttpMessageConverter				：   负责读取form提交的数据（能读取的数据格式为 application/x-www-form-urlencoded，不能读取multipart/form-data格式数据）；负责写入application/x-www-from-urlencoded和multipart/form-data格式的数据；
		5、MappingJacksonHttpMessageConverter	：   负责读取和写入json格式的数据；
		6、SourceHttpMessageConverter			：   负责读取和写入 xml 中javax.xml.transform.Source定义的数据；
		7、Jaxb2RootElementHttpMessageConverter	：   负责读取和写入xml 标签格式的数据；
		8、AtomFeedHttpMessageConverter			：   负责读取和写入Atom格式的数据；
		9、RssChannelHttpMessageConverter		：   负责读取和写入RSS格式的数据； 
		
	 -->
	 <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter" >
		<property name="supportedMediaTypes">    
			<list>    
				<value>text/plain;charset=UTF-8</value>    
			</list>    
		</property>  
    </bean>
    
    <bean id="jsonHttpMessageConverter"  class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
        <property name="supportedMediaTypes">  
            <list>  
                <value>application/json</value>  
            </list>  
        </property>  
    </bean>
    
    <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.enhanced.http.converter.json.MappingJacksonHttpMessageConverterEx">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	
	<mvc:annotation-driven>
		<mvc:argument-resolvers>  
			<bean class="org.springframework.enhanced.web.method.support.FastJsonArgumentResolver"/>  
		</mvc:argument-resolvers>  
		<mvc:message-converters>
			<ref bean="stringHttpMessageConverter" />
            <ref bean="jsonHttpMessageConverter" />
            <ref bean="mappingJacksonHttpMessageConverter" />
			<bean class="org.springframework.http.converter.ResourceHttpMessageConverter" />
			<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
			<bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4" />
		</mvc:message-converters>
		<mvc:return-value-handlers>
			<bean class="org.springframework.enhanced.web.servlet.mvc.method.annotation.HttpCrosHeadersReturnValueHandler"/>
		</mvc:return-value-handlers>
	</mvc:annotation-driven>
	
	<!-- ###########Spring MVC 文件上传支持########### -->
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<property name="maxInMemorySize" value="40960" />
		<!--resolveLazily属性启用是为了推迟文件解析，以便在UploadAction 中捕获文件大小异常  
        <property name="resolveLazily" value="true"/> -->
	</bean>
	
	<!-- ###########Spring MVC 视图解析########### -->
	
	<!-- FreeMarker视图解析配置 -->
	<!-- <bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPaths" value="/WEB-INF/pages/" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="freemarkerSettings">
			<props>
				<prop key="defaultEncoding">UTF-8</prop>
				<prop key="url_escaping_charset">UTF-8</prop>
				<prop key="locale">zh_CN</prop>
				<prop key="template_update_delay">1</prop>
				<prop key="tag_syntax">auto_detect</prop>
				<prop key="whitespace_stripping">true</prop>
				<prop key="classic_compatible">true</prop>
				<prop key="object_wrapper">freemarker.ext.beans.BeansWrapper</prop>
			</props>
		</property>		
		<property name="freemarkerVariables">
			<map>
				<entry key="base" value="#{servletContext.contextPath}" />
				<entry key="messageUtil" value-ref="messageMethod" />
				<entry key="buttonsUtil" value-ref="buttonsDirective" />
				<entry key="layout" value-ref="freemarkerLayoutDirectives" />
			</map>
		</property>
	</bean> -->
	
	<!-- Freemarker视图解析器 -->
	<!-- <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="suffix" value=".ftl" />
		<property name="cache" value="false" />
		<property name="contentType" value="text/html;charset=UTF-8" />
		<property name="order" value="1" />
	</bean> -->
	
	<!-- ###########Spring MVC 主题支持########### -->
	<!-- 参考 ： http://blog.csdn.net/wutbiao/article/details/7450281 -->
	
	<bean id="themeChangeInterceptor" class="org.springframework.web.servlet.theme.ThemeChangeInterceptor">
		<property name="paramName" value="theme"></property>
	</bean>
	
	<bean id="themeSource" class="org.springframework.ui.context.support.ResourceBundleThemeSource">
		<property name="basenamePrefix" value="/WEB-INF/themes/"></property>
	</bean>
	
	<bean id="themeResolver" class="org.springframework.web.servlet.theme.CookieThemeResolver">
		<property name="defaultThemeName">
			<value>default</value>
		</property>
	</bean>
	
	<!-- ###########SpringMVC本地化支持########### -->
	<!-- 参考 ： 
		http://blog.csdn.net/wutbiao/article/details/7454345 
		http://yvonxiao.iteye.com/blog/1005183 
	-->
	<bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
		<property name="paramName" value="language" />
	</bean>
	
	<!-- <bean id="localeResolver" class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"/> -->
	<!-- <bean id="localeResolver" class="org.springframework.web.servlet.i18n.FixedLocaleResolver"/> -->
	<!-- 基于Cookie的本地化解析器 -->
	<!-- 
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<property name="cookieMaxAge" value="604800" />
		<property name="defaultLocale" value="zh_CN" />
		<property name="cookieName" value="Language"></property>
	</bean>
	-->
	<!-- 基于Session的本地化解析器 -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<property name="defaultLocale" value="zh_CN" />
	</bean>
	
	<mvc:interceptors>  
	    <!-- 本地化拦截器;如果采用基于（请求/Session/Cookie）则必需配置 -->  
	    <ref bean="localeChangeInterceptor"/>
	    <!-- 主题切换拦截器;如果采用基于（请求/Session/Cookie）则必需配置 -->
	    <ref bean="themeChangeInterceptor"/>
	</mvc:interceptors>
	
	<!-- ###########SpringMVC 路径映射 ########### -->
	
	<!-- Servlet适配器，这里必须明确声明，因为spring默认没有初始化该适配器 -->  
    <bean id="servletHandlerAdapter" class="org.springframework.web.servlet.handler.SimpleServletHandlerAdapter" /> 
	
	<!-- ###########SpringMVC 全局映射########### -->
	
	<!-- 默认访问地址映射 -->
	<!-- <mvc:view-controller path="/" view-name="redirect:/index" /> -->
	<!-- 异常响应映射 -->
	<mvc:view-controller path="/403.zf" view-name="/exception/403" />
	<mvc:view-controller path="/404.zf" view-name="/exception/404" />
	<mvc:view-controller path="/500.zf" view-name="/exception/500" />
	<mvc:view-controller path="/error.zf" view-name="/exception/error" />
	
	<!-- ###########SpringMVC 异常处理 ########### -->
	
	<!-- 
		ConversionNotSupportedException 		500 (Internal Server Error) 
		HttpMediaTypeNotAcceptableException 	406 (Not Acceptable) 
		HttpMediaTypeNotSupportedException 		415 (Unsupported Media Type) 
		HttpMessageNotReadableException 		400 (Bad Request) 
		HttpMessageNotWritableException 		500 (Internal Server Error) 
		HttpRequestMethodNotSupportedException 	405 (Method Not Allowed) 
		MissingServletRequestParameterException 400 (Bad Request) 
		NoSuchRequestHandlingMethodException 	404 (Not Found) 
		TypeMismatchException 					400 (Bad Request) 
	-->
	<bean id="handlerExceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">/exception/403</prop>
				<prop key="java.io.FileNotFoundException">/exception/404</prop>
			</props>
		</property>
		<property name="defaultErrorView" value="/exception/error" />
		<property name="defaultStatusCode" value="500" />
	</bean>
	
	<!-- ###########SpringMVC Shiro集成 ########### -->

	<!-- 开启Shiro注解的Spring配置方式的beans。在lifecycleBeanPostProcessor之后运行 -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 开启Shiro注解的Spring配置方式的beans。在lifecycleBeanPostProcessor之后运行 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>

	<!-- ###########SpringMVC 日志记录 ########### -->
	
	<bean id="businessLogAspect" class="com.woshidaniu.common.log.BusinessLogAspect"></bean>

	<aop:config>
		<aop:pointcut id="logPointcut"  expression="execution(* com.woshidaniu..controller.*.*(..)) and @annotation(com.woshidaniu.common.log.BusinessLog) and @annotation(businessLog)" />
		<aop:aspect id="logAspect" ref="businessLogAspect">
			<aop:after-returning method="afterReturing"  pointcut-ref="logPointcut" />
		</aop:aspect>
	</aop:config>
	
	<!-- ###########SpringMVC Controller 自动注入 ########### -->
	
	<!-- 自动扫描controller目录下的Java Bean -->
	<context:component-scan base-package="com.woshidaniu.**.*.controller" />

</beans>