##ORACLE Configuration

db.url = Kbs2u6NELkMD+i6RnR+aSRYguMAm9Sijs60p2ZfE8+wHkVsh0SdX85+Y60A4RnMl
#db.username	= Z+XilocyJEE=
#db.password = Z+XilocyJEE=
db.username	= WhFxceMfFiTDCdpaPYu9wQ==
db.password = WhFxceMfFiTDCdpaPYu9wQ==

#===============Druid连接池通用配置=========================================

#connectionProperties: 连接数据库的额外参数
db.connectionProperties = druid.stat.slowSqlMillis=3000
#initialSize: 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
db.initialSize = 15
#minIdle: 最小连接池数量
db.minIdle = 5
#maxActive: 最大连接池数量
db.maxActive = 50
# 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
db.maxWait = 60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒;有两个含义：1) Destroy线程会检测连接的间隔时间 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
db.timeBetweenEvictionRunsMillis = 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒 
db.minEvictableIdleTimeMillis = 300000
# 超过时间限制是否回收
db.removeAbandoned = true
# 超过时间限制多长，单位是毫秒 ，180000毫秒=3分钟
db.removeAbandonedTimeout = 180000
# 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。-->
db.validationQuery = SELECT 1 FROM DUAL
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsdationQuery检测连接是否有效。
db.testWhileIdle = true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
db.testOnBorrow = false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
db.testOnReturn = false
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。
db.poolPreparedStatements = true
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100--> 
db.maxPoolPreparedStatementPerConnectionSize = 100
# Druid的监控统计功能:属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：                 
# 监控统计用的filter:stat
# 日志用的filter:slf4j
# 防御SQL注入的filter:wall 
db.filters = config,stat,slf4j