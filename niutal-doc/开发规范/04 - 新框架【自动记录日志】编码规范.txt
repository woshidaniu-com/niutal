
一、日志记录组件基本使用步骤：

步骤1： 

	在模块下的resources目录下创建logger-模块名称.properties文件；以创建管理为例：文件为logger-cjgl.properties
	
步骤2： 

	为配置文件填写配置信息
	
	1、配置【操作模块】以系统菜单代码编号为准；如：
	
	N30		=	成绩管理
	N3003	=	成绩管理-基本信息维护
	N3005	=	成绩管理-绩点信息管理
	N3010	=	成绩管理-成绩对照信息管理

	2、配置【业务名称】以最低层菜单代码[二级菜单，三级菜单]编号为准；如：
	
	N300510	=	无绩点课程设置
	N301005	=	成绩对照信息维护
	N3015	=	阶段比例信息维护
	
	3、配置【操作描述模板】；左侧key : 业务代码+ service调用方法名称  ；右侧信息：直接将详细信息以编号的形式定义在这里；例：用户[admin][新增用户]参数[a=1,b=2]
	
	#############绩点信息维护#############
	N300505-zj = 增加绩点信息;ID #{jsmc}
	N300505-xg = 修改绩点信息;ID #{jsmc}
	N300505-sc = 删除绩点信息;ID #{jsmc}
	
步骤3： 
	
	在service实现类中添加日志记录注解
	
	1、配置【功能代码执行完后记录日志的注解】@After
	2、配置【记录日志的注解】@Logger(name="非必填",model="功能模块代码[必填]",business="业务模块代码[必填]")
	
	例如：
	@After
	@Logger(name="commonLogAspect",model="N30",business="N3035")
	public class ZkCjlrServiceImpl extends BaseServiceImpl<ZkcjModel, IZkCjlrDao> 
	
	3、在需要进日志记录的方法上添加 @Comment 注解
	
	关于注解@Comment 的参数：
	------参数名称-------------------参数类型-----------------------说明-----------------------------------------------------------------------------------------------------------------
	|	model				|		String			|		功能模块代码
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	|	business			|		String			|		业务模块代码
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	|	unstatements		|		String			|		不需要记录日志的SQL ID;默认为空 不进行处理
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	|	statements			|		String			|		需要记录日志的SQL ID;默认为空 记录全部
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	|	recordDesc			|		Boolean			|		是否记录操作描述:默认true
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	|	recordSQL			|		Boolean			|		是否记录SQL;默认false
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
二、详细信息动态参数规范，以ZkCjlrServiceImpl为例：

	详细描述信息这里使用了借助OGNL表达式实现的字符格式化对象 StringOgnlFormat：
	
	所以描述信息中的表达式理论上支持OGNL的所有表达式；所有的表达式必须{}包裹：
	
	例如：
	
		新增【{#xn}】学年【{#xq}】学期
		起始周是否小于结束周：{ #qsz < #jsz  }
	
	例如 ：
		ZkcjModel 对象中有属性 jxb_id 取值方式 可为：{#model.jgh_id}
		ZkcjModel 对象中有属性 fxcjList 取值方式 可为：{#model.fxcjList[0].xmcj} 

	其中model是参数名称；另外参数默认有user 可以 用来取 用户信息 如：{#user.xm}
	
	如果一方法：
	
	@Comment
	public Map<String,List<FxcjModel>> getJxbXsFxcjList(ZkcjModel model,List<CjfxModel> cjfxList){
		//....
	}
	
	对于此方法来说：
	取值可以写 表达式  ： 	model.属性名称
						cjfxList[索引].属性名称
						
						user.属性名称		: 这里的user指当前登录用户对象User
	其他方法依此类推；
	
	如果参数是数组可以使用OGNL表达式，进行参数处理：
	如：model中有pks数组对象，格式信息可为：用户【{#user.xm}（{#user.yhm}）】删除报名控制 fxezybmkz_id：{@org.apache.commons.lang.StringUtils@join(#model.pks,",")}
	
三、日志记录组件调用方式详解；以JsglServiceImpl为例：


1、简单方式：针对于方法名称与dao调用SQL的ID相同或者查询功能的日志记录；例如：
	
	@Comment
	public void zjJsxx(JsglModel model) {
		//功能代码...
	}

	//配置信息为：
	N010201-zjJsxx		= 增加【角色名称 {#model.jsmc}，角色代码{#model.jsdm}】角色信息
	
	
2、指定方法记录；statements={}；这里statements 可以是一个具体方法名称也可以是正则表达式 ：例如：
	
	@Comment(statements={".*sc.*"})
	public void scJsxx(JsglModel model) {
		//功能代码...
	}

	//表示本次service方法中只对包含sc字符的dao方法记录SQL日志
	//配置信息为：
	N010201-scJsxx 		= 删除【角色ID = {#model.pkValue}】角色信息
	
	
3、 过滤service调用方法中不记录SQL日志的方法；unstatements={}；这里unstatements 可以是一个具体方法名称也可以是正则表达式 ；例如：

	@Comment(unstatements={".*get.*"})
	public void zjJsyhfpxx(JsglModel model){
		//功能代码...
	}

	//表示本次service方法中不对包含get字符的dao方法记录SQL日志
	//配置信息为：
	N010201-zjJsyhfpxx	= 给角色【{#model.jsmc}-{#model.jsdm}】分配用户{#model.yhm}
	
	
	
注意：unstatements 与  statements 优先取 unstatements；二者只可配置一个
	
	
	
	
	
	