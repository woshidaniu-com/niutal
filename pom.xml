<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.woshidaniu</groupId>
	<artifactId>niutal</artifactId>
	<version>1.3.21-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>niutal Project(我是大牛-通用业务框架)</name>
	
	<!-- 仅直接管理核心模块；扩展模块单独导入和打包 -->
	<modules>
		
		<module>niutal-core-api</module>
		<module>niutal-core-common</module>
		<module>niutal-core-dao</module>
		<module>niutal-core-service</module>
		<module>niutal-core-shiro</module>
		<module>niutal-core-util</module>
<!-- 		<module>niutal-core-web</module> -->
		<module>niutal-doc</module>
		<!-- <module>niutal-core-files</module> -->
		<module>niutal-core-action</module>
		<module>niutal-core-export</module>
		<module>niutal-core-web-v5</module>
		<module>niutal-core-controller</module>
		<module>niutal-core-sso</module>
		<module>niutal-core-struts2</module>
		<module>niutal-core-webmvc</module>
		<!-- <module>niutal-struts2-common</module> -->
		<module>niutal-core-dr-parent</module>
	
		<!-- 教务专有模块 -->
		<module>niutal-core-jwdao</module>
		<module>niutal-core-jwservice</module>
		<module>niutal-core-jwaction</module>
		<module>niutal-core-jwws</module>
		<module>niutal-core-jwweb</module>
		
		<!-- 模块化组件 -->
		<module>niutal-component-bpm-parent</module>
		<module>niutal-component-datarange-parent</module>
		<module>niutal-component-designer-parent</module>
		<module>niutal-component-drdc-parent</module>
		<module>niutal-component-editor-parent</module>
		<module>niutal-component-filemgr-parent</module>
		<module>niutal-component-i18n-parent</module>
		<module>niutal-component-metrics-parent</module>
		<module>niutal-component-monitor-parent</module>
		<module>niutal-component-ms-parent</module>
		<module>niutal-component-pwdmgr-parent</module>	
		<module>niutal-component-taglibs-parent</module>
		<module>niutal-component-tjcx-parent</module>
		<module>niutal-component-wjdc-parent</module>
		<module>niutal-component-workflow-parent</module>
		<module>niutal-component-zxzx-parent</module>
		<module>niutal-component-print-parent</module>
		
		
	</modules>
	
	<!-- 组织信息  -->
  	<organization>
		<name>我是大牛软件股份有限公司</name>
		<url>http://www.woshidaniu.com</url>
	</organization>
	
	<!-- 开发者信息  -->
    <developers>
        <developer>
        	<id></id>
            <name></name>
            <email></email>
        </developer>
    </developers> 
    
    <!-- 配置部署的远程仓库:让Maven知道当我要发布release版本或者snapshot版本是需要发布到哪个地址 --> 
    <distributionManagement>
		<repository>
			<id>Releases</id>
			<name>Nexus Release Repository</name>
			<url>http://10.71.19.153:8081/nexus/content/repositories/releases/</url>
		</repository>
		<snapshotRepository>
			<id>Snapshots</id>
			<name>Nexus Snapshot Repository</name>  
			<url>http://10.71.19.153:8081/nexus/content/repositories/snapshots/</url>
		</snapshotRepository>
	</distributionManagement>

	<!-- SCM配置 -->
	<scm>
		<connection>scm:svn:http://10.71.32.193/svn/repository/jszx_jcpt/niutal/trunk/niutal/</connection>
		<developerConnection>scm:svn:http://10.71.32.193/svn/repository/jszx_jcpt/niutal/trunk/niutal/</developerConnection>
		<tag>scm:svn:http://10.71.32.193/svn/repository/jszx_jcpt/niutal/trunk/tags/</tag>
		<url>scm:svn:http://10.71.32.193/svn/repository/jszx_jcpt/niutal/trunk/</url>
	</scm>
	
	<!-- 工程构建配置 -->
    <build>
		<filters>  
	        <!-- 过滤文件,通常是一个属性文件（名值对的形式）   
	        <filter>src/main/webapp/META-INF/auto-config.properties</filter>  -->
	        <!-- 
	            <filter>${user.home}/antx.properties</filter> 
	        -->  
	    </filters> 
		<pluginManagement>
			<plugins>
				<!-- 编译插件：编译主代码至主输出目录 -->  
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.5.1</version> 
					<!-- 设置源文件编码方式 -->  
					<configuration>
						<defaultLibBundleDir>lib</defaultLibBundleDir> 
						<!-- 源代码编译版本 -->
						<source>1.6</source>
						<!-- 目标平台编译版本 -->
						<target>1.6</target>
						<!-- 字符集编码 -->
						<encoding>${project.build.sourceEncoding}</encoding>
						<!--  -->
						<maxmem>512M</maxmem>
					</configuration>
				</plugin>
				<!-- 资源插件：复制主资源文件至主输出目录 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.0.1</version>
					<!-- 解决资源文件的编码问题 -->  
					<configuration>
						<!-- 字符集编码 -->
						<encoding>${project.build.sourceEncoding}</encoding>
					</configuration>
					<!-- 复制测试资源文件至测试输出目录复制resources到classess -->
					<executions>
						<execution>
							<id>copy-resources</id>
							<phase>validate</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>${basedir}/target/classes</outputDirectory>
								<resources>
									<resource>
										<directory>src/main/resources</directory>
										<!-- <filtering>true</filtering> -->
									</resource>
								</resources>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<!-- 单元测试插件 ：执行测试用例-->  
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.19.1</version>
					<configuration>
						<!-- 跳过单元测试 -->
						<skip>true</skip>
						<skipTests>true</skipTests>
						<!--
							forkMode 可设置值有 “never”， “once”， “always” 和 “pertest”。
							pretest： 每一个测试创建一个新进程，为每个测试创建新的JVM是单独测试的最彻底方式，但也是最慢的，不适合hudson上持续回归。
							once：在一个进程中进行所有测试。once为默认设置，在Hudson上持续回归时建议使用默认设置。
							always：在一个进程中并行的运行脚本，Junit4.7以上版本才可以使用，surefire的版本要在2.6以上提供这个功能，其中 threadCount：执行时，指定可分配的线程数量。只和参数parallel配合使用有效。默认：5。
						 -->
						<forkMode>once</forkMode>
						<argLine>-Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=256m -Dfile.encoding=UTF-8</argLine>  
						<additionalClasspathElements>  
			                <additionalClasspathElement>${basedir}/target/test-classes</additionalClasspathElement>  
			            </additionalClasspathElements>  
			            <includes>  
			                <include>**/*Test.java</include> 
			            </includes> 
                        <excludes>
                            <exclude>**/TestBean.java</exclude>
                        </excludes>
					</configuration>					
				</plugin>
				<!-- jar包生成插件 ：创建项目jar包--> 
				<plugin>  					 
					<groupId>org.apache.maven.plugins</groupId>  
					<artifactId>maven-jar-plugin</artifactId>  
					<version>3.0.2</version>  
					<configuration> 
						<encoding>${project.build.sourceEncoding}</encoding>
						<skipIfEmpty>false</skipIfEmpty> 
	                    <archive>  
	                    	<!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖  
	                        <manifest>  
	                            <addClasspath>true</addClasspath>  
	                            <classpathPrefix>lib/</classpathPrefix>  
	                            <mainClass>.....Main</mainClass>  
	                        </manifest>  -->
				            <manifest>
				            	 <!-- 在jar包中增加依赖jar路径说明 -->
				              	<addClasspath>true</addClasspath>
				            </manifest>
				            <!-- 用maven在MANIFEST.MF资料中的Class-Path中增加当前目录(.)  -->
	                        <manifestEntries>
	                           <Class-Path>.</Class-Path>
	                        </manifestEntries>
	                    </archive>  
	                </configuration>  
	                <executions>
						<!-- 增加关于接口打包的配置：配置后会在原有打包的基础上多打包一个api包
						<execution>
							<id>package-api</id>
							<goals>
								<goal>jar</goal>
							</goals>
							<phase>package</phase>
							<configuration>
								<classifier>api</classifier>
								<includes>
									<include>**/interface/**</include>
								</includes>
							</configuration>
						</execution> -->
						<!-- <execution>
							<id>package-all</id>
							<goals>
								<goal>jar</goal>
							</goals>
							<phase>package</phase>
							<configuration>
								<classifier>all</classifier>
								<includes>
									<include>**</include>
								</includes>
							</configuration>
						</execution> -->
					</executions>
				</plugin> 
				<!-- jar包生成插件 ：使用模块自身代码和依赖jar包打包最终的jar --> 
			    <plugin>
			        <groupId>org.apache.maven.plugins</groupId>  
			        <artifactId>maven-shade-plugin</artifactId>  
			        <version>2.4.3</version>
			        <executions>  
			            <execution>  
			                <phase>package</phase>  
			                <goals>  
			                    <goal>shade</goal>  
			                </goals>  
			                <configuration>
	                            <createSourcesJar>true</createSourcesJar>
	                            <shadeSourcesContent>true</shadeSourcesContent>
	                            <shadeTestJar>false</shadeTestJar>
			                	<createDependencyReducedPom>false</createDependencyReducedPom>
	                            <dependencyReducedPomLocation>${basedir}/dependency-reduced-pom.xml</dependencyReducedPomLocation>
			                	<!-- 
			                	<shadedArtifactAttached>false</shadedArtifactAttached>
			                	<shadedArtifactId>${project.artifactId}</shadedArtifactId>
	              				<shadedClassifierName>all</shadedClassifierName> 
	              				-->
	              				<filters>
			                        <filter>
			                            <artifact>*:*</artifact>
			                            <excludes>
			                                <exclude>META-INF/*.SF</exclude>
			                                <exclude>META-INF/*.DSA</exclude>
			                                <exclude>META-INF/*.RSA</exclude>
			                            </excludes>
			                        </filter>
			                    </filters>
	                            <artifactSet>
									<excludes>
										<exclude>junit:junit</exclude>
										<exclude>org.slf4j:slf4j-api:jar:</exclude>
										<exclude>javax.servlet:javax.servlet-api:jar:</exclude>
									</excludes>
				              	</artifactSet>
			                    <transformers>
			                    	<!-- 程序入口类
			                        <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">  
			                            <mainClass>com.woshidaniu.examples.Main</mainClass>  
			                        </transformer>   -->
			                       	<!-- 下面这段配置意思是把spring.handlers和spring.schemas文件以append方式加入到构建的jar包中，这样就不会出现xsd找不到的情况。
			                        <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">  
			                            <resource>META-INF/spring.handlers</resource>  
			                        </transformer> 
			                        <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">  
			                            <resource>META-INF/spring.schemas</resource>  
			                        </transformer>  
			                       --> 
			                    </transformers>  
			                </configuration>  
			            </execution>  
			        </executions>  
			    </plugin>
			    <!-- assembly插件打包成jar包  -->
	            <plugin>
	                <groupId>org.apache.maven.plugins</groupId>
	                <artifactId>maven-assembly-plugin</artifactId>
	                <version>2.4.1</version>
	                <configuration>  
	                    <finalName>${project.artifactId}</finalName>  
	                    <descriptors>  
	                        <descriptor>${basedir}/src/main/resources/assembly.xml</descriptor>  
	                    </descriptors>
	                    <descriptorRefs>
		                    <!-- jar-with-dependencies是assembly 预先写好的一个，组装描述引用（assembly descriptor）; 我们可以自定义一个描述 -->
		                    <!-- <descriptorRef>jar-with-dependencies</descriptorRef> -->
	                        <descriptorRef>jar-with-dependencies</descriptorRef>
	                    </descriptorRefs>
	                    <!-- MainClass in mainfest make a executable jar 
	                    <archive>
	                      	<manifest>
	                        	<mainClass>xxx.xxx</mainClass>
	                      	</manifest>
	                    </archive>
	 					-->
	                </configuration>
	                <executions>
	                  <execution>
	                    <id>make-assembly</id>
	                    <!-- bind to the packaging phase -->
	                    <phase>package</phase> 
	                    <goals>
	                        <goal>single</goal>
	                    </goals>
	                  </execution>
	                </executions>
	            </plugin> 
				<!-- 安装插件：将项目输出构件安装到本地仓库 --> 
				<plugin>  					 
					<groupId>org.apache.maven.plugins</groupId>  
					<artifactId>maven-install-plugin</artifactId>  
					<version>2.5.2</version>  
				</plugin> 
				<!-- 发布插件 ：将项目输出构件部署到远程仓库--> 
				<plugin>  
		            <groupId>org.apache.maven.plugins</groupId>  
		            <artifactId>maven-deploy-plugin</artifactId>  
		            <version>2.8.2</version>  
		        </plugin>
		        <!-- versions 插件: 自动进行工程版本升级 -->
		        <plugin>  
		            <groupId>org.codehaus.mojo</groupId>  
		            <artifactId>versions-maven-plugin</artifactId>  
		            <version>2.3</version>  
		        </plugin>
		        <!-- release插件: 自动进行工程版本升级 -->
	            <plugin>
	                <groupId>org.apache.maven.plugins</groupId>
	                <artifactId>maven-release-plugin</artifactId>
	                <version>2.5.3</version>
	            </plugin>	
		        <!-- 签名插件 ：自动完成GPG签名--> 
		        <plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-gpg-plugin</artifactId>
					<version>1.6</version>
					<executions>
					    <execution>
							<id>sign-artifacts</id>
							<phase>verify</phase>
							<goals>
							     <goal>sign</goal>
							</goals>
					    </execution>
					</executions>
				</plugin>	
				<!-- 源码插件:发布时自动将源码同时发布 -->				
				<plugin>
					 <groupId>org.apache.maven.plugins</groupId>
					 <artifactId>maven-source-plugin</artifactId>
					 <version>3.0.1</version> 
					 <!-- 打包source文件为jar文件 -->
					 <configuration>  
					 	 <testFailureIgnore>true</testFailureIgnore>
					 	 <!-- 打包源码一起发布到maven仓库中 -->
	                     <attach>true</attach>  
	                     <encoding>${project.build.sourceEncoding}</encoding>  
	                 </configuration> 
					 <executions>
						 <execution>
							 <id>attach-sources</id>
							 <phase>package</phase>
							 <goals>
							 	<!-- 
								 	jar-no-fork与jar的区别
									jar，在执行goal之前，执行generate-sources阶段，也就是说，如果，jar绑定的目标在generate-sources之后(比如verify)的话，generate-sources会执行两遍。
									jar-no-fork，没有其余动作，在绑定的phase执行。
								 -->
								<!-- <goal>jar</goal> -->
								<goal>jar-no-fork</goal>
							 </goals>
						 </execution>
					 </executions>
				</plugin>
				<!-- 文档插件:发布时自动生成文档 -->	
				<plugin>  
		            <groupId>org.apache.maven.plugins</groupId>  
		            <artifactId>maven-javadoc-plugin</artifactId>  
		            <version>2.10.4</version> 
					<configuration>  
	                    <aggregate>true</aggregate>  
	                    <argLine>-Dfile.encoding=UTF-8</argLine>
                       	<charset>${project.build.sourceEncoding}</charset> 
                        <encoding>${project.build.sourceEncoding}</encoding> 
                        <docencoding>${project.build.sourceEncoding}</docencoding> 
	                </configuration>
<!-- 					<executions> -->
<!-- 						<execution> -->
<!-- 							<id>attach-javadocs</id> -->
<!-- 							<phase>package</phase> -->
<!-- 							<goals> -->
<!-- 								<goal>jar</goal> -->
<!-- 							</goals> -->
<!-- 						</execution> -->
<!-- 					</executions>				 -->
		        </plugin>
				<!-- 依赖配置生成插件 ：自动复制maven依赖包到lib目录 -->  
				<plugin>  
		            <groupId>org.apache.maven.plugins</groupId>  
		            <artifactId>maven-dependency-plugin</artifactId>  
		            <version>2.10</version>  
		            <!-- 拷贝依赖的jar包到lib目录 -->  
		            <executions>  
	                    <execution>  
	                        <id>copy-dependencies</id>  
	                        <phase>compile</phase>  
	                        <goals>  
	                            <goal>copy-dependencies</goal>  
	                        </goals>  
	                        <configuration>  
								<!-- <outputDirectory>${basedir}/src/main/webapp/WEB-INF/lib</outputDirectory>   -->
				                <!-- ${project.build.directory}为Maven内置变量，缺省为target  
				                <outputDirectory>${project.build.directory}/lib</outputDirectory>  --> 
				                <!-- 表示是否不包含间接依赖的包 -->  
				                <excludeTransitive>false</excludeTransitive>  
				                <!-- 表示复制的jar文件去掉版本信息 -->  
				                <stripVersion>true</stripVersion>  
	                        </configuration>  
	                    </execution>  
	                </executions>  
		        </plugin>
				<!-- war 包生成插件 -->
				<plugin>
					 <groupId>org.apache.maven.plugins</groupId>
					 <artifactId>maven-war-plugin</artifactId>
					 <version>2.6</version>
					 <configuration>
					 	<!-- 包含空目录 --> 
					 	<includeEmptyDirectories>true</includeEmptyDirectories>
					 	<!-- 是否将webapp下的逻辑代码打包成jar文件，使用此可选配置参数可将已编译的类归档到一个jar文件。 并且classes 目录将被从Web应用程序排除在外，主要表现是classes目录的编译的类不会再war包中。  -->
						<archiveClasses>false</archiveClasses>
						<!-- 是否 classes目录内容（也就是WEB-INF/classes目录下的内容）可以作为一个额外的依赖附着到项目中。 打包时将war项目中相关的类文件打成独立jar包；好处是：只修改class时，可以只更新jar -->
						<attachClasses>true</attachClasses>
						<!--独立jar包后缀名称 -->
						<classesClassifier>api</classesClassifier>
					 	<!-- 设置无web.xml时不报错 --> 
					 	<failOnMissingWebXml>false</failOnMissingWebXml>
					 	<!-- 必须指定,否则默认会变成在target/war/work 导致被打包进war文件,指定后为target/work -->
						<workDirectory>${project.build.directory}/work</workDirectory>
						<!-- 指定webapp所在目录-->
						<warSourceDirectory>${basedir}/src/main/webapp</warSourceDirectory>
						<!-- 表示在打war包拷贝位于warSourceDirectory目录中的内容时要过滤的目录或文件 
						<warSourceExcludes>WEB-INF/classes/**,META-INF/**</warSourceExcludes>-->
						
						<!-- 表示在打war包时过滤位于src/main/resources目录中指定的目录或文件
						<packagingExcludes>*.*</packagingExcludes> -->
						
				        <!-- 配置将资源文件打到classes目录下的相关信息-->
						<webResources>
							<resource>
								<!-- 元配置文件的目录，相对于pom.xml文件的路径 -->  
								<directory>src/main/resources</directory>
				                <!-- 是否过滤文件，也就是是否启动auto-config的功能   -->
				                <filtering>true</filtering>  
				                <!-- 目标路径 -->  
				                <targetPath>WEB-INF/classes</targetPath>  
							</resource>
					 	</webResources>
					 </configuration>
				</plugin>
				<!-- war包依赖传递拷贝插件 ： 插件可以将从依赖的WAR中传递的依赖都打包到当前的WAR -->
				<plugin>
					<groupId>org.appfuse</groupId>
					<artifactId>maven-warpath-plugin</artifactId>
					<version>2.0.2</version>
					<extensions>true</extensions>
					<configuration>
						<!--<workDirectory>${basedir}/target/warpath</workDirectory>
						<warpathExcludes>**/logback-test.xml</warpathExcludes>-->
						<!-- below WEB-INF/classes -->
						<warpathExcludes>WEB-INF/classes,**/logback-test.xml</warpathExcludes>
					</configuration>
				</plugin>
				<!-- ant脚步执行插件 --> 				
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>  
					<artifactId>maven-antrun-plugin</artifactId>
					<version>1.8</version>  
					<executions>
						<execution>
							<id>copy-war</id>
							<phase>package</phase>
							<configuration>
								<tasks>
									<delete dir="${TOMCAT_HOME}/webapps/${project.artifactId}-${project.version}" />
									<copy todir="${TOMCAT_HOME}/webapps">
										<fileset dir="target">
											<include name="*.war" />
										</fileset>
									</copy>
								</tasks>
							</configuration>
							<goals>
								<goal>run</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!--远程部署web工程 --> 
				<plugin>
		           	<groupId>org.apache.tomcat.maven</groupId>
		          	<artifactId>tomcat6-maven-plugin</artifactId>
		          	<version>2.2</version>   
		            <configuration>
		              <url>http://localhost:8080/manager/html</url> 
		              <server>tomcat</server>
		              <warFile>${project.build.directory}/${project.build.finalName}.${project.packaging}</warFile>
		            </configuration>       
		        </plugin>
		        <plugin>
		           	<groupId>org.apache.tomcat.maven</groupId>
		          	<artifactId>tomcat7-maven-plugin</artifactId>
		          	<version>2.2</version>
		            <configuration>
		                <url>http://localhost:8080/manager/html</url> 
		                <server>tomcat</server>
		                <warFile>${project.build.directory}/${project.build.finalName}.${project.packaging}</warFile>
		            </configuration>
		        </plugin>
				<!-- web运行插件 --> 
				<plugin>
					<groupId>org.mortbay.jetty</groupId>
					<artifactId>maven-jetty-plugin</artifactId>
					<version>6.1.10</version>
					<configuration>
						<webAppSourceDirectory>src/main/webapp</webAppSourceDirectory>
						<scanIntervalSeconds>0</scanIntervalSeconds>
						<contextPath>/</contextPath> 
						<reload>manual</reload>
						<webDefaultXml>src/main/resources/jetty/webdefault.xml</webDefaultXml>
						<connectors>
		                    <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">  
		                        <port>8088</port>  
		                    </connector>  
		                </connectors>  
					</configuration>
				</plugin>
				<!-- 单元测试代码覆盖率插件 -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>cobertura-maven-plugin</artifactId>
					<version>2.3</version>
					<configuration>
						<formats>
							<format>html</format>
							<format>xml</format>
						</formats>
						<instrumentation>
						<!-- <excludes> <exclude>com/**/*Test.class</exclude> </excludes> -->
						</instrumentation>
					</configuration>
				</plugin>
				<!-- docker-maven插件: https://github.com/spotify/docker-maven-plugin,http://blog.csdn.net/qq_22841811/article/details/67369530 -->
				<plugin>
					<groupId>com.spotify</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<version>0.4.13</version>
					<executions>
						<execution>
							<id>build-image</id>
							<phase>package</phase>
							<goals>
								<goal>build</goal>
							</goals>
						</execution>
						<execution> 
							<id>tag-image</id> 
							<phase>package</phase> 
							<goals> 
								<goal>tag</goal> 
							</goals> 
							<configuration> 
								<image>${project.artifactId}:${project.version}</image> 
								<newName>${docker.push.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}</newName> 
							</configuration> 
						</execution>
						<execution>
							<id>push-image</id>
							<phase>deploy</phase>
							<goals>
								<goal>push</goal>
							</goals>
							<configuration> 
								<imageName>${docker.push.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}</imageName> 
							</configuration>
						</execution>
					</executions>
					<configuration>
						<!-- 注意imageName一定要是符合正则[a-z0-9-_.]的，否则构建不会成功 -->
						<!-- 详见：https://github.com/spotify/docker-maven-plugin Invalid repository 
							name ... only [a-z0-9-_.] are allowed -->
						<!-- 如果要将docker镜像push到DockerHub上去的话，这边的路径要和repo路径一致 -->
						<imageName>${project.artifactId}:${project.version}</imageName>
						<!-- 指定Dockerfile所在的路径 -->
						<!-- <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory> -->
						<baseImage>tomcat:latest</baseImage>
						<volumes>
							<volume>/tmp</volume>
						</volumes>
						<exposes>8080</exposes>
						<entryPoint>["catalina.sh","run"]</entryPoint>
						<dockerHost>http://${docker.build.repostory}:2376</dockerHost>
						<resources>
							<resource>
								<targetPath>/usr/local/tomcat/webapps/</targetPath>
								<directory>${project.build.directory}</directory>
								<includes>
									<include>${project.build.finalName}.war</include>
								</includes>
							</resource>
						</resources>
						<!-- 以下两行是为了docker push到DockerHub使用的。 -->
						<serverId>docker-hub</serverId>
						<!-- <registryUrl>http://10.71.33.155/</registryUrl> -->
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!-- 编译插件：编译主代码至主输出目录 -->  
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<!-- 资源插件：复制主资源文件至主输出目录 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>
			<!-- 单元测试插件 ：执行测试用例 --> 
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
			<!-- jar包生成插件 ：创建项目jar包 -->
			<plugin>  					 
				<groupId>org.apache.maven.plugins</groupId>  
				<artifactId>maven-jar-plugin</artifactId>  
			</plugin> 
			<!-- 源码插件:发布时自动将源码同时发布 -->				
			<plugin>
				 <groupId>org.apache.maven.plugins</groupId>
				 <artifactId>maven-source-plugin</artifactId>
			</plugin>
			<!-- 文档插件:发布时自动生成文档 -->	
<!-- 			<plugin>   -->
<!-- 	            <groupId>org.apache.maven.plugins</groupId>   -->
<!-- 	            <artifactId>maven-javadoc-plugin</artifactId>   -->
<!-- 	        </plugin> -->
			<!-- 安装插件：将项目输出构件安装到本地仓库 --> 
			<plugin>  					 
				<groupId>org.apache.maven.plugins</groupId>  
				<artifactId>maven-install-plugin</artifactId>  
			</plugin> 
			<!-- 发布插件 ：将项目输出构件部署到远程仓库--> 
			<plugin>  
	            <groupId>org.apache.maven.plugins</groupId>  
	            <artifactId>maven-deploy-plugin</artifactId>  
	        </plugin>
			<!-- 依赖配置生成插件 
			<plugin>  
	            <groupId>org.apache.maven.plugins</groupId>  
	            <artifactId>maven-dependency-plugin</artifactId>  
	        </plugin>--> 
			<!-- war 包生成插件
			<plugin>
				 <groupId>org.apache.maven.plugins</groupId>
				 <artifactId>maven-war-plugin</artifactId>
			</plugin> -->
			<!-- ant脚步执行插件 				
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>  
				<artifactId>maven-antrun-plugin</artifactId>
			</plugin> -->
			<!--远程部署web工程 
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>tomcat-maven-plugin</artifactId>
			</plugin>--> 
			<!-- web运行插件  
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>maven-jetty-plugin</artifactId>
			</plugin>-->
		</plugins>
	</build>
	
	<!-- 依赖版本-->
	<properties>
		<project.build.sourceEncoding>utf-8</project.build.sourceEncoding>
		<!--docker build、push地址-->
	    <docker.workdir>/u01/niutal-ui/${project.artifactId}</docker.workdir>
	    <docker.push.repostory>10.71.33.155</docker.push.repostory>
	    <docker.build.repostory>10.71.33.155</docker.build.repostory>
	    <!--push镜像到私有库项目的名称-->
	    <docker.registry.name>woshidaniu</docker.registry.name>
		<aspectj.version>1.8.9</aspectj.version>
		<batik.version>1.8</batik.version>
		<cglib.version>3.2.4</cglib.version>
		<commons-compiler.version>2.6.1</commons-compiler.version>
		<commons-logging.version>1.2</commons-logging.version>
		<commons-net.version>3.4</commons-net.version>
		<cos.version>20021105</cos.version>
		<dbunit.version>2.5.1</dbunit.version>
		<druid.version>1.0.31</druid.version>
		<disruptor.version>3.3.6</disruptor.version>
		<httpunit.version>1.7.2</httpunit.version>
		<janino.version>2.6.1</janino.version>
		<jdom.version>2.0.2</jdom.version>
		<jackson.version>2.8.8</jackson.version>
		<javax.activation.version>1.1.1</javax.activation.version>
		<javax.mail-api.version>1.5.6</javax.mail-api.version>
		<javax.jsp-api.version>2.3.1</javax.jsp-api.version>
		<javax.jstl-api.version>1.2.1</javax.jstl-api.version>
		<javax.jstl-impl.version>1.1.2</javax.jstl-impl.version>
		<javax.servlet-api.version>3.0.1</javax.servlet-api.version>
		<junit.version>4.12</junit.version>
		<jxl.version>2.6.12</jxl.version>
		<log4j.version>1.2.17</log4j.version>
		<log4j2.version>2.3</log4j2.version><!-- 2.4.x~2.7.x(JDK 1.7), 2.3.x(JDK 1.6)-->
		<oracle-10g-driver.version>10.2.0.5</oracle-10g-driver.version>
		<oracle-11g-driver.version>11.2.0.4</oracle-11g-driver.version>
		<oracle-12c-driver.version>12.1.0.2</oracle-12c-driver.version>
		<sitemesh3.version>3.0.1</sitemesh3.version>
		<struts2-annotations.version>1.0.6</struts2-annotations.version>
		<struts2-xwork.version>2.3.31</struts2-xwork.version>
		<slf4j.version>1.7.21</slf4j.version>
		<spring.version>4.3.6.RELEASE</spring.version><!-- 4.3.6.RELEASE、4.1.9.RELEASE、4.0.9.RELEASE -->
		<swagger.version>1.5.13</swagger.version>
		<jsonlib.version>2.4</jsonlib.version>
		<javamelody.version>1.58.0</javamelody.version>
		
		<mybatis.version>3.4.2</mybatis.version>
		<mybatis-spring.version>1.3.1</mybatis-spring.version>
		
		
		<ant.version>1.8.2</ant.version>
		<jsoup.version>1.10.1</jsoup.version>
		<jaxen.version>1.1.1</jaxen.version>
		<ezmorph.version>1.0.6</ezmorph.version>
		<sqlprofiler.version>1.1</sqlprofiler.version>
		<commons-pool.version>1.5.7</commons-pool.version>
		<p6spy.version>2.0.2</p6spy.version>
		
		<dom4j.version>1.6.1</dom4j.version>
		<bcprov.version>1.54</bcprov.version>
		<commons-io.version>2.5</commons-io.version>
	
		<!--niutal版本：方便子项目引用-->
		<niutal.version>1.3.21-SNAPSHOT</niutal.version>
		<!--niuca版本-->
		<niuca.version>6.0</niuca.version>
		<!--niukit版本-->
		<niukit.version>1.1.1</niukit.version>
		<niukit-fastdoc.version>1.1.1</niukit-fastdoc.version>
		<niukit-fastpdf.version>1.1.1</niukit-fastpdf.version>
		<niukit-fastxls.version>1.1.1</niukit-fastxls.version>
		
		<niutal-bpm.version>1.1.4-SNAPSHOT</niutal-bpm.version>
		
	</properties>

	<dependencyManagement>
		<dependencies>
		
			<!-- ######################测试工具包###################### -->
			
			<!--junit : Junit测试是程序员测试，即白盒测试 -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
			</dependency>
			<!--dbunit ：dbunit是一个基于junit扩展的数据库测试框架 -->
			<dependency>
				<groupId>org.dbunit</groupId>
				<artifactId>dbunit</artifactId>
				<version>${dbunit.version}</version>
			</dependency>
			<!--
				httpunit：HttpUnit是SourceForge下面的一个开源项目，它是基于JUnit的一个测试框架，主要关注于测试Web应用；
				解决使用JUnit框架无法对远程Web内容进行测试的弊端
			-->
			<dependency>
				<groupId>org.httpunit</groupId>
				<artifactId>httpunit</artifactId>
				<version>${httpunit.version}</version>
			</dependency>
			
			<!-- ###################### Java Mail 组件  ###################### -->
			
			<!-- The JavaBeans(TM) Activation Framework is used by the JavaMail(TM) API to manage MIME data -->
			<dependency>
				<groupId>javax.activation</groupId>
				<artifactId>activation</artifactId>
				<version>${javax.activation.version}</version>
			</dependency>
			<!-- JavaMail API  -->
			<dependency>
				<groupId>javax.mail</groupId>
				<artifactId>javax.mail-api</artifactId>
				<version>${javax.mail-api.version}</version>
			</dependency>
			<!-- JavaMail API (Sun)
			注意：
				有的jar没有包含sun的实现，只包含了api，这类jar名称通常为javax.mail-api-x.x.x.jar，在使用smtp协议发邮件过程中会报错：
				另一种jar是包含了sun的实现的，名称通常为javax.mail-x.x.x.jar，使用smtp协议发邮件正常！
			-->
			<dependency>
			    <groupId>com.sun.mail</groupId>
			    <artifactId>javax.mail</artifactId>
			    <version>${javax.mail-api.version}</version>
			</dependency>
			 
			<!-- ###################### Java Web API ###################### -->
			
			<!-- Java Servlet API -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${javax.servlet-api.version}</version>
			</dependency>
			<!-- The Java Portlet API version 3.0 developed by the Java Community Process JSR-362 Expert Group. -->
			<dependency>
				<groupId>javax.portlet</groupId>
				<artifactId>portlet-api</artifactId>
				<version>${javax.portlet-api.version}</version>
			</dependency>
			<!-- JavaServer Pages(TM) API  -->
			<dependency>
			    <groupId>javax.servlet.jsp</groupId>
			    <artifactId>javax.servlet.jsp-api</artifactId>
			    <version>${javax.jsp-api.version}</version>
			</dependency>
			<!-- JavaServer Pages(TM) Standard Tag Library API -->
			<!-- JSTL（JSP Standard Tag Library，JSP标准标签库) 是一个不断完善的开放源代码的JSP标签库，是由apache的jakarta小组来维护的。 -->
			<dependency>
			    <groupId>javax.servlet.jsp.jstl</groupId>
			    <artifactId>javax.servlet.jsp.jstl-api</artifactId>
			    <version>${javax.jstl-api.version}</version>
			</dependency>
			<!-- An implementation of the JSP Standard Tag Library (JSTL).  -->
			<!-- Taglibs是为JSP定制标签库和相关的项目提供的一个开源仓库，如TagLibraryValidator类，和对页面生成工具的扩展来支持标签 库。 -->
			<dependency>
				<groupId>taglibs</groupId>
				<artifactId>standard</artifactId>
				<version>${javax.jstl-impl.version}</version>
			</dependency>
			
			<!-- ###################### Java Web 组件 ###################### -->
			
			<!-- SiteMesh 是一个网页布局和修饰的框架，利用它可以将网页的内容和页面结构分离，以达到页面结构共享的目的 -->
			<dependency>
				<groupId>org.sitemesh</groupId>
				<artifactId>sitemesh</artifactId>
				<version>${sitemesh3.version}</version>
			</dependency>
			<!-- Kaptcha是一个基于SimpleCaptcha的验证码开源项目  http://chenzhou123520.iteye.com/blog/1987636 -->
			<dependency>
				<groupId>com.github.penggle</groupId>
				<artifactId>kaptcha</artifactId>
				<version>2.3.2</version>
			</dependency>
			<!-- Java Image Processing Pages  -->
			<dependency>
				<groupId>com.jhlabs</groupId>
				<artifactId>filters</artifactId>
				<version>2.0.235-1</version>
			</dependency>
			
						
			<!-- ######################日志组件工具包###################### -->
			
			<!-- 
				实现各个日志组件之间的桥接并最终输出到log4j2 ：
				
				实现方案：
	
					第一步：将日志系统全部无缝先切换到slf4j
						1、去掉commons-logging（其实去不去都可以），使用jcl-over-slf4j将commons-logging的底层日志输出切换到slf4j
				        2、使用jul-to-slf4j，将jul的日志输出切换到slf4j
				       	3、使用slf4j-log4j12,将slf4j的日志输出切换到log4j
					第二步：使slf4j选择log4j2来作为底层日志输出
						加入以下jar包：
					    slf4j-api
					    log4j
			-->
			
			<!--
				Jakarta Commons Logging (JCL) 提供的是一个日志 (Log) 接口 (interface)
				，同时兼顾轻量级和不依赖于具体的日志实现工具 。 它提供给中间件 /
				日志工具开发者一个简单的日志操作抽象，允许程序开发人员使用不同的具体日志实现工具。用户被假定已熟悉某种日志实现工具的更高级别的细节。
				JCL 提供的接口，对其它一些日志工具，包括 Log4J, Avalon LogKit, and JDK 1.4
				等，进行了简单的包装，此接口更接近于 Log4J 和 LogKit 的实现。
			-->
			<dependency>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
				<version>${commons-logging.version}</version>
			</dependency>
			<!-- SLF4J，即简单日志门面（Simple Logging Facade for Java），不是具体的日志解决方案，它只服务于各种各样
				 的日志系统。按照官方的说法，SLF4J是一个用于日志系统的简单Facade，允许最终用户在部署其应用时使用其所希望的日志系统。 -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			
			<!-- Log4j 2.x 包含了基于LMAX 分离库的下一代的异步日志系统，在多线程环境下，异步日志系统比 Log4j 1.x 和Logback 提高了10倍性能提升（吞吐量和延迟率 ）-->  
	        
	        <!-- The Apache Log4j Implementation  -->
	        <dependency>  
	            <groupId>org.apache.logging.log4j</groupId>  
	            <artifactId>log4j-core</artifactId>  
	            <version>${log4j2.version}</version>   
	        </dependency>  
	        <!-- The Apache Log4j support for web servlet containers  -->
	        <dependency>
			    <groupId>org.apache.logging.log4j</groupId>
			    <artifactId>log4j-web</artifactId>
			    <version>${log4j2.version}</version> 
			</dependency>
			<!-- The Apache Log4j SLF4J API binding to Log4j 2 Core  -->
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-slf4j-impl</artifactId>
				<version>${log4j2.version}</version>
			</dependency>
			<!-- The Apache Log4j Commons Logging Adapter  -->
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-jcl</artifactId>
				<version>${log4j2.version}</version>
			</dependency>
			<!-- The Apache Log4j implementation of java.util.logging  -->
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-jul</artifactId>
				<version>${log4j2.version}</version>
			</dependency>
			<!-- Disruptor它是一个开源的并发框架,并获得2011 Duke’s 程序框架创新奖,能够在无锁的情况下实现网络的Queue并发操作。 -->
			<dependency>
			    <groupId>com.lmax</groupId>
			    <artifactId>disruptor</artifactId>
			    <version>${disruptor.version}</version>
			</dependency>
			
			<!-- ###################### 基础常用工具包 ###################### -->
			 
			<dependency>
				<groupId>org.apache.ant</groupId>
				<artifactId>ant</artifactId>
				<version>${ant.version}</version>
			</dependency>
			<dependency>
				<groupId>org.codehaus.janino</groupId>
				<artifactId>janino</artifactId>
				<version>${janino.version}</version>
			</dependency>
			<dependency>
				<groupId>org.codehaus.janino</groupId>
				<artifactId>commons-compiler</artifactId>
				<version>${commons-compiler.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-net</groupId>
				<artifactId>commons-net</artifactId>
				<version>${commons-net.version}</version>
			</dependency>
			
			<!-- ######################JSON数据处理工具包###################### -->
			
			<!--json-lib是一个Java类库,提供将Java对象,包括beans,maps,collections,javaarrays和xml等转换成JSON,或者反向转换的功能-->
			<dependency>
				<groupId>net.sf.json-lib</groupId>
				<artifactId>json-lib</artifactId>
				<version>${jsonlib.version}</version>
				<classifier>jdk15</classifier>
				<exclusions>
					<exclusion>
						<groupId>commons-beanutils</groupId>
						<artifactId>commons-beanutils</artifactId>
					</exclusion>
					<exclusion>
						<groupId>commons-collections</groupId>
						<artifactId>commons-collections</artifactId>
					</exclusion>
					<exclusion>
						<groupId>commons-logging</groupId>
						<artifactId>commons-logging</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			
			<!-- ###################### Spring 4.x ###################### -->

			<!-- REST的web服务和用于web应用程序的mvc实现 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>
				<version>${spring.version}</version>
			</dependency>
			
			<!-- ###################### 连接池组包 ###################### -->
			<!--
				Druid是阿里巴巴开源平台上的一个项目，整个项目由数据库连接池、插件框架和SQL解析器组成。
				该项目主要是为了扩展JDBC的一些限制，可以让程序 员实现一些特殊的需求，比如向密钥服务请求凭证、
				统计SQL信息、SQL性能收集、SQL注入检查、SQL翻译等，程序员可以通过定制来实现自己需要的功 能
			-->
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>druid</artifactId>
				<version>${druid.version}</version>
			</dependency>
			
			<!-- ######################数据库驱动包###################### -->
			
			<!-- 
				Oracle JDBC Driver. 
				ojdbc14	: Classes for use with JDK 1.4 and 1.5
				ojdbc5	: Classes for use with JDK 1.5.
				ojdbc6	: Classes for use with JDK 1.6.
				ojdbc7	: Certified with JDK7 and JDK 8; 
				It contains the JDBC driver classes except classes for NLS support in Oracle Object and Collection types.
				特别注意：
				1、因为Oracle数据库版本或JDK版本不同，此处需要根据实际情况调整不同的数据库驱动
				2、Oracle 12C JDBC 连接要求:
					(1)、需要jre 1.7 及以上版本
					(2)、ojdbc jar包需要更换版本为ojdbc7 （http://10.71.19.153:8081/nexus/content/repositories/public/com/oracle/ojdbc7/12.1.0.2/ojdbc7-12.1.0.2.jar）
					(3)、连接字符串示例
					原来写法
					jdbc:oracle:thin:@10.71.19.171:1521:pdb1
					需要变更为
					jdbc:oracle:thin:@10.71.19.171:1521/pdb1
			-->
			<dependency>
				<groupId>com.oracle</groupId>
				<artifactId>ojdbc14</artifactId>
				<version>${oracle-10g-driver.version}</version>
			</dependency>
			<dependency>
				<groupId>com.oracle</groupId>
				<artifactId>ojdbc5</artifactId>
				<version>${oracle-11g-driver.version}</version>
			</dependency>
			<dependency>
				<groupId>com.oracle</groupId>
				<artifactId>ojdbc6</artifactId>
				<version>${oracle-11g-driver.version}</version>
				<!-- <version>${oracle-12c-driver.version}</version> -->
			</dependency>
			<dependency>
				<groupId>com.oracle</groupId>
				<artifactId>ojdbc7</artifactId>
				<version>${oracle-12c-driver.version}</version>
			</dependency>
			
			<!-- ###################### 各种单点登录依赖 ###################### -->
			
			<!-- 我是大牛单点配置 -->
			<dependency>
				<groupId>com.woshidaniu</groupId>
				<artifactId>niucaclient</artifactId>
				<version>${niuca.version}</version>
			</dependency>
			<!-- 金智门户单点认证  -->
			<dependency>
				<groupId>com.jzsoft</groupId>
				<artifactId>idstar</artifactId>
				<version>1.3</version>
			</dependency>
			<!-- 华中师范大学 单点认证-->
			<dependency>
			  <groupId>thauthall</groupId>
			  <artifactId>thauthall</artifactId>
			  <version>1.0.0</version>
			</dependency>
			<!-- 浙大单点登录-->
<!--			<dependency>-->
<!--				<groupId>com.woshidniu</groupId>-->
<!--				<artifactId>validate</artifactId>-->
<!--				<version>1.0</version>-->
<!--			</dependency>-->
<!--			-->
			<!-- ###################### 我是大牛软件软件授权实现  ###################### -->
			
<!-- 			<dependency>-->
<!-- 				<groupId>com.woshidaniu</groupId>-->
<!-- 				<artifactId>niutal-license</artifactId>-->
<!-- 				<classifier>pg</classifier>-->
<!-- 				<version>1.0.3.1</version>  随着JAR包版本的更新，这里也要更新，默认1.0.1-->
<!-- 			</dependency>-->

			<dependency>
				<groupId>com.woshidaniu</groupId>
				<artifactId>niutal-license</artifactId>
				<version>1.0.4</version>  <!-- 随着JAR包版本的更新，这里也要更新，默认1.0.1 -->
			</dependency>
			
			<!-- ###################### 我是大牛软件快速快发组件 ###################### -->
			
			<!-- niukit-base : 快速开发基础工具组件  -->
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-basemodel</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-basicutils</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-freemarker</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-httpclient</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-httputils</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-javamail</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-qrcode</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-security</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-ftpclient</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-smbclient</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-yuicompressor</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-xmlhub</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-spring</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-shiro</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-finereport</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<!-- niukit-web : Web快速调用组件  -->
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-web</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-web-ext</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-safety</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-struts2</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-search-taglib</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<!-- niukit-ws :  WebService快速调用组件 -->
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-ws-axis</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-ws-cxf</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<!-- niukit-cache : 缓存操作快速开发组件 -->
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-cache-core</artifactId>
				<version>${niukit.version}</version>
			</dependency> 
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-cache-ehcache</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-cache-xmemcached</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<!-- niukit-orm : ORM/持久层框架快速开发组件 -->
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-orm-mybatis</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			<!-- niukit-db : 数据库操作快速开发组件  -->
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-db-core</artifactId>
				<version>${niukit.version}</version>
			</dependency>
			
			<!-- ###################### 我是大牛软件Office文档开发组件 ###################### -->
			
			<!-- fastdoc : 基于XML的Word文档快速生成组件  -->
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>fastdoc-core</artifactId>
				<version>${niukit-fastdoc.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>fastdoc-docx4j</artifactId>
				<version>${niukit-fastdoc.version}</version>
			</dependency>
			<!-- fastpdf : 基于itext的PDF快速生成组件 -->
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>fastpdf-core</artifactId>
				<version>${niukit-fastpdf.version}</version>
			</dependency>
			<!-- fastxls : 基于POI、JXL的Excel,Doc,PPT等快速生成组件  -->
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>fastxls-core</artifactId>
				<version>${niukit-fastxls.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>fastxls-poi</artifactId>
				<version>${niukit-fastxls.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>fastxls-jexcel</artifactId>
				<version>${niukit-fastxls.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>fastxls-struts2</artifactId>
				<version>${niukit-fastxls.version}</version>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>niukit-qa</artifactId>
				<version>${niukit.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>
	
	<!-- 通用依赖 -->
	<dependencies>
	
		<!-- ######################测试工具包###################### -->
		
		<!--junit,dbunit 测试工具-->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.dbunit</groupId>
			<artifactId>dbunit</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.apache.poi</groupId>
					<artifactId>poi-ooxml</artifactId>
				</exclusion>
				<exclusion>
					<artifactId>commons-collections</artifactId>
					<groupId>commons-collections</groupId>
				</exclusion>
			</exclusions>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.9.5</version>
			<scope>test</scope>
		</dependency>
		
		<!-- ###################### Java Web API ###################### -->
        
        <!-- Java Servlet API -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- JavaServer Pages(TM) API  -->
		<dependency>
		    <groupId>javax.servlet.jsp</groupId>
		    <artifactId>javax.servlet.jsp-api</artifactId>
		    <scope>provided</scope>
		</dependency>
		<!-- JavaServer Pages(TM) Standard Tag Library API -->
		<dependency>
		    <groupId>javax.servlet.jsp.jstl</groupId>
		    <artifactId>javax.servlet.jsp.jstl-api</artifactId>
		</dependency>
		
		<!-- The slf4j API -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		
	</dependencies>
	
	<!-- 单元测试各项报告 -->
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>2.5.1</version>
				<configuration>
					<threshold>High</threshold>
					<effort>Default</effort>
					<findbugsXmlOutput>true</findbugsXmlOutput>
					<findbugsXmlWithMessages>true</findbugsXmlWithMessages>
					<xmlOutput>true</xmlOutput>
					<formats>
						<format>html</format>
					</formats>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>2.5</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>2.10</version>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<outputDirectory>./target/tmpCobertura</outputDirectory>
					<formats>
						<format>html</format>
						<format>xml</format>
					</formats>
					<aggregate>true</aggregate>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jdepend-maven-plugin</artifactId>
				<version>2.0-beta-2</version>
			</plugin>
		</plugins>
	</reporting>
	
</project>