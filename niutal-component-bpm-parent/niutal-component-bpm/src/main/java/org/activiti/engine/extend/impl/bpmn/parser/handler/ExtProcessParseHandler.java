/**
 * 
 */
package org.activiti.engine.extend.impl.bpmn.parser.handler;

import java.util.LinkedHashMap;
import java.util.Map;

import org.activiti.bpmn.model.Process;
import org.activiti.engine.impl.bpmn.data.IOSpecification;
import org.activiti.engine.impl.bpmn.parser.BpmnParse;
import org.activiti.engine.impl.bpmn.parser.handler.ProcessParseHandler;
import org.activiti.engine.impl.el.ExpressionManager;
import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.task.TaskDefinition;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * <p>
 * <h3>niutal框架
 * <h3>说明：ExtProcessParseHandler
 * <p>
 * 
 * @className:org.activiti.engine.extend.impl.bpmn.parser.handler.ExtProcessParseHandler.java
 * @author <a href="mailto:337836629@qq.com">zhidong.kang[1036]<a>
 * @version 2017年4月10日下午5:23:57
 */
public class ExtProcessParseHandler extends ProcessParseHandler {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(ExtProcessParseHandler.class);

	protected ProcessDefinitionEntity transformProcess(BpmnParse bpmnParse, Process process) {
		ProcessDefinitionEntity currentProcessDefinition = new ProcessDefinitionEntity();
		bpmnParse.setCurrentProcessDefinition(currentProcessDefinition);

		/*
		 * Mapping object model - bpmn xml: processDefinition.id -> generated by
		 * activiti engine processDefinition.key -> bpmn id (required)
		 * processDefinition.name -> bpmn name (optional)
		 */
		currentProcessDefinition.setKey(process.getId());
		currentProcessDefinition.setName(process.getName());
		currentProcessDefinition.setCategory(bpmnParse.getBpmnModel().getTargetNamespace());
		currentProcessDefinition.setDescription(process.getDocumentation());
		currentProcessDefinition.setProperty(PROPERTYNAME_DOCUMENTATION, process.getDocumentation()); // Kept
																										// for
																										// backwards
																										// compatibility.
																										// See
																										// ACT-1020
		currentProcessDefinition.setTaskDefinitions(new LinkedHashMap<String, TaskDefinition>());
		currentProcessDefinition.setDeploymentId(bpmnParse.getDeployment().getId());
		createExecutionListenersOnScope(bpmnParse, process.getExecutionListeners(), currentProcessDefinition);
		createEventListeners(bpmnParse, process.getEventListeners(), currentProcessDefinition);

		ExpressionManager expressionManager = bpmnParse.getExpressionManager();

		for (String candidateUser : process.getCandidateStarterUsers()) {
			currentProcessDefinition
					.addCandidateStarterUserIdExpression(expressionManager.createExpression(candidateUser));
		}

		for (String candidateGroup : process.getCandidateStarterGroups()) {
			currentProcessDefinition
					.addCandidateStarterGroupIdExpression(expressionManager.createExpression(candidateGroup));
		}

		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("Parsing process {}", currentProcessDefinition.getKey());
		}

		bpmnParse.setCurrentScope(currentProcessDefinition);

		bpmnParse.processFlowElements(process.getFlowElements());
		processArtifacts(bpmnParse, process.getArtifacts(), currentProcessDefinition);

		// parse out any data objects from the template in order to set up the
		// necessary process variables
		Map<String, Object> variables = processDataObjects(bpmnParse, process.getDataObjects(),
				currentProcessDefinition);
		if (null != currentProcessDefinition.getVariables()) {
			currentProcessDefinition.getVariables().putAll(variables);
		} else {
			currentProcessDefinition.setVariables(variables);
		}

		bpmnParse.removeCurrentScope();

		if (process.getIoSpecification() != null) {
			IOSpecification ioSpecification = createIOSpecification(bpmnParse, process.getIoSpecification());
			currentProcessDefinition.setIoSpecification(ioSpecification);
		}
		return currentProcessDefinition;
	}
}
