#------------------------------------------------------------
#			以下均为系统运行期间内置参数								|
#------------------------------------------------------------

#===============框架基本参数配置=========================================
niutal.sso.notcheckURL = /zfssologin;/xtgl/dl_loginForward.html;/xtgl/login_slogin.html;/xtgl/login_getPublicKey.html;/xtgl/dl_logout.html

#===============框架基本参数配置=========================================

#基础数据XML配置文件
niutal.basicdata.file= conf/comm/baseData.xml
#---临时文件路径
niutal.tempPath=temp
#---CSS文件版本
niutal.cssVersion=20160604
#---JS文件版本
niutal.jsVersion=20160604

#是否开启框架内缓存支持
niutal.cache.support = true

#登录页面地址
niutal.login.forward.url = /xtgl/dl_loginForward.html
#登录成功后跳转的主页地址
niutal.login.homepage.url = /xtgl/index_initMenu.html
#票据登录（通过握手秘钥等参数认证登录）中的token失效时间；可使用单位 (s:秒钟,m:分钟,h:小时,d:天)；如10m表示10分钟
niutal.login.ticket.token_period = 10m
#票据登录（通过握手秘钥等参数认证登录）中的时间戳允许时差范围；可使用单位 (s:秒钟,m:分钟,h:小时,d:天)；如5m表示5分钟
niutal.login.ticket.timestamp_period = 5m

#===============Druid连接池通用配置=========================================

#这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName
druid.driverClassName = oracle.jdbc.driver.OracleDriver
#connectionProperties: 连接数据库的额外参数
druid.connectionProperties = druid.stat.slowSqlMillis=3000
#initialSize: 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
druid.initialSize = 15
#minIdle: 最小连接池数量
druid.minIdle = 5
#maxActive: 最大连接池数量
druid.maxActive = 50
# 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
druid.maxWait = 60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒;有两个含义：1) Destroy线程会检测连接的间隔时间 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
druid.timeBetweenEvictionRunsMillis = 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒 
druid.minEvictableIdleTimeMillis = 300000
# 超过时间限制是否回收
druid.removeAbandoned = true
# 超过时间限制多长，单位是毫秒 ，180000毫秒=3分钟
druid.removeAbandonedTimeout = 180000
# 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。-->
druid.validationQuery = SELECT 1 FROM DUAL
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsdationQuery检测连接是否有效。
druid.testWhileIdle = true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
druid.testOnBorrow = false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
druid.testOnReturn = false
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。
druid.poolPreparedStatements = true
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100--> 
druid.maxPoolPreparedStatementPerConnectionSize = 100
# Druid的监控统计功能:属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：                 
# 监控统计用的filter:stat
# 日志用的filter:slf4j
# 防御SQL注入的filter:wall 
druid.filters = config,stat,slf4j
		
#===============安全参数全局配置=========================================

#解析扫描器类型
niutal.safety.xss.scanType = 1
#需要过滤的请求路径的正则匹配表达式
niutal.safety.xss.include-patterns = 
#不需要过滤的请求路径的正则匹配表达式
niutal.safety.xss.exclude-patterns = /editor/*.html
#默认的防XSS攻击的规则配置
niutal.safety.xss.default-policy = classpath:conf/security/woshidaniu-antixss-policy.xml
#防XSS攻击的模块对应的规则配置
niutal.safety.xss.policy-mappings =

#===============FTPResourceRequestFilter全局参数配置====================

#文件本地存储路径
niutal.ftpclient.web.tmpdir = tmpdir
#是否缓存FTP文件到本地存储路径
niutal.ftpclient.web.cacheLocal = false
#FTP文件在本地缓存的时间;默认10分钟
niutal.ftpclient.web.cacheExpiry = 600000
#请求过滤前缀;默认 /ftp/
niutal.ftpclient.web.requestPrefix = /ftp/

#===============SMBResourceRequestFilter全局参数配置====================

#文件本地存储路径
niutal.smbclient.web.tmpdir = tmpdir
#是否缓存共享文件到本地存储路径
niutal.smbclient.web.cacheLocal = false
#共享文件在本地缓存的时间;默认10分钟
niutal.smbclient.web.cacheExpiry = 600000
#请求过滤前缀;默认 /smb/
niutal.smbclient.web.requestPrefix = /smb/

#===============防恶意请求频繁刷新过滤器参数配置=========================================

#指定【判断为恶意刷新】过滤器是否开启，默认： false
refresh.on				=	false
#指定【判断为恶意刷新】的周期时间；单位秒，默认： 10s
refresh.interval		=	10
#指定【判断为恶意刷新】周期内刷新的次数【注意因为框架中主页数据查询URL根据doType参数重复利用，这里至少设置3次】，默认： 100
refresh.count			=	100
#指定清除【请求记录缓存】的过期时间；单位秒，默认： 10s
refresh.cache.expire	=	10
#指定清除【请求记录缓存】的等待间隔时间；单位秒，默认： 2s
refresh.cache.clearTime	=	2

#===============防盗链拦截器参数配置=========================================

#指定【允许引用本站地址的站点域名或ID】默认全部;，默认： *
referer.domain			=	*


#===============YUI js,css压缩过滤器和监听器参数========================================

#是否Debug模式,是则不会进行js,css资源的压缩处理：该模式通常在开发时设置为true,部署时设置为false
niutal.yui.debug	= true
#压缩后文件的后缀前的扩展名称
niutal.yui.suffix	= min
#应用启动后启动js,css文件压缩线程的延时时间：单位秒
niutal.yui.delay	= 3
#是否对已压缩的文件进行重新生成:默认true
niutal.yui.rebuild	= true

#===============Apache HttpClient 相关参数========================================

#设置httpclient是否使用NoDelay策略;默认 true
http.tcp.nodelay = true
#通过网络与服务器建立连接的超时时间。Httpclient包中通过一个异步线程去创建与服务器的socket连接，
#这就是该socket连接的超时时间(单位毫秒)，默认30000 =  1000 * 30 
http.connection.timeout = 30000
# 读取数据超时时间(单位毫秒)，默认60000 =  1000 * 60 
http.socket.timeout = 60000
# 每个HOST的最大连接数量
http.connection-manager.max-per-host = 20
# 连接池的最大连接数
http.connection-manager.max-total = 60
#socket发送数据的缓冲大小，设置为：1MB
http.socket.sendbuffer = 1048576
#socket接收数据的缓冲大小，设置为：1MB
http.socket.receivebuffer = 1048576
#定时清除失效连接心跳线程执行周期(单位毫秒)，默认5000 
http.timeout.interval = 5000

#=============== KindEditor 组件后台逻辑相关参数========================================

#用于加密文件路径的RSA公钥
kindeditor.rsa.public_key = 
#用于解密文件路径的RSA私钥
kindeditor.rsa.private_key = 
#使用FTP服务器作为文件存储时生成访问路径的前缀;注意此处的..为相对路径
kindeditor.ftp.prefix = ../ftp/
#使用文件共享服务器作为文件存储时生成访问路径的前缀;注意此处的..为相对路径
kindeditor.smb.prefix = ../smb/
#使用应用服务器本身作为文件存储时生成访问路径的前缀;注意此处的..为相对路径
kindeditor.servlet.prefix = ../servlet/streamServlet?filePath=
#kindeditor判断一个类型是图片的依据;多个以",; \t\n"分割
kindeditor.imageTypes =  gif,jpg,jpeg,png,bmp
#kindeditor可上传和浏览的目录;多个以",; \t\n"分割
kindeditor.dirTypes =  image,flash,media,file
#每种可上传和浏览的目录对应的可上传文件类型，以 “kindeditor.目录名称.types”方式命名;如值为“*”表示允许任何类型的文件;多个以",; \t\n"分割
#可上传图片类型
kindeditor.image.types = gif,jpg,jpeg,png,bmp
#可删除flash类型
kindeditor.flash.types = swf,flv
#可上传media类型
kindeditor.media.types = swf,flv,mp3,mp4,wav,wma,wmv,mid,avi,mpg,asf,rm,rmvb
#可上传文件类型
kindeditor.file.types = doc,docx,xls,xlsx,ppt,htm,html,txt,zip,rar,gz,bz2,pdf,gif,jpg,jpeg,png,bmp,swf,flv,swf,flv,mp3,mp4,wav,wma,wmv,mid,avi,mpg,asf,rm,rmvb
#可上传文件大小限制；默认 10M，单位为：KB,MB,GB,TB;注意这里配置的上传大小限制不能大于Strut2本身的上传文件大小限制，否则没有意义 
kindeditor.maxsize =  50MB
#具体指定每种文件类型可上传文件大小，以 “kindeditor.后缀名称.maxsize”方式命名
kindeditor.doc.maxsize = 2MB

#=============== 软件授权相关提示参数========================================

#授权文件不存在的提示
license.notfouned = \u6388\u6743\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u4e0d\u80fd\u8bbf\u95ee\u7cfb\u7edf\uff01
#授权文件不合法的提示，比如拷贝其他学校的授权文件
license.illegal =  \u6388\u6743\u6587\u4ef6\u975e\u6cd5\uff0c\u4e0d\u80fd\u8bbf\u95ee\u7cfb\u7edf\uff01
#授权日期即将到期的提示
license.toexpire = \u6388\u6743\u5373\u5c06\u5230\u671f\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\uff01
#授权日期已经到期的提示
license.expired = \u8f6f\u4ef6\u4f7f\u7528\u8fc7\u671f\uff0c\u4e0d\u80fd\u8bbf\u95ee\u7cfb\u7edf\uff01
 
 
 