<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
	
	  <bean name="memcachedClientBuilder" class="com.woshidaniu.common.cache.NewXMemcachedClientBuilder">  
		<constructor-arg>
	    	<value>#{dataSourceProps['cached.service']}</value>
		</constructor-arg>
		<!-- NIO连接池大小，即客户端个数  
		#连接池大小即客户端个数;推荐在0-30之间为好，太大则浪费系统资源，太小无法达到分担负载的目的
		#默认的pool size是1。设置这一数值不一定能提高性能，请依据你的项目的测试结果为准。初步的测试表明只有在大并发下才有提升。 
		#设置连接池的一个不良后果就是，同一个memcached的连接之间的数据更新并非同步的 
		#因此你的应用需要自己保证数据更新的原子性（采用CAS或者数据之间毫无关联）
		-->
		<property name="connectionPoolSize" value="50"></property>
		<!-- 链接超时时间 ;默认5s，设置为10s-->
        <property name="connectTimeout" value="10000"></property>
		<!-- 使用二进制文件协议，默认TextCommandFactory   -->
		<property name="commandFactory">
			<bean class="net.rubyeye.xmemcached.command.BinaryCommandFactory"></bean>
		</property>
		<!-- 使用一致性哈希算法（Consistent Hash Strategy）    -->
		<property name="sessionLocator">
			<bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator"></bean>
		</property>
		<!-- 序列化转换器  -->
		<property name="transcoder">
			<bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder">
				<!-- 进行数据压缩，大于1KB时进行压缩   -->
				<property name="compressionThreshold" value="1024"></property>
			</bean> 
		</property>
		<!-- IoBuffer分配器 ;-->
        <property name="bufferAllocator">
            <bean class="net.rubyeye.xmemcached.buffer.SimpleBufferAllocator"></bean>
        </property>
	</bean>
	
	<!-- Use factory bean to build memcached client -->
	<bean name="memcachedClient" factory-bean="memcachedClientBuilder" factory-method="build" destroy-method="shutdown">
	      <!-- 10s -->
	      <property name="connectTimeout" value="10000"/>
	</bean>
	
	<!-- <bean name="configuration" class="com.google.code.yanf4j.config.Configuration">
	    <property name="readThreadCount" value="20"/>
	    <property name="writeThreadCount" value="20"/>
	    <property name="checkSessionTimeoutInterval" value="8000"/>
	    <property name="soTimeOut" value="70000"/>
	    <property name="sessionIdleTimeout" value="500000"/>  
	</bean> -->
	<!-- 通过注解方式注入到BaseAction,BaseServiceImpl -->
	<bean name="newMemcachedClient" class="com.woshidaniu.common.cache.NewMemcachedClient">
		<property name="memcachedClient" ref="memcachedClient"/>
		<!-- 20min 
		<property name="expiry" value="1200000"/>-->
	</bean>
	
	<!-- Memcached 缓存切面切口实现 -->
	<bean id="memcachedInterceptor" class="com.woshidaniu.cache.xmemcached.interceptor.MemcachedAspectInterceptor"  >
		<property name="cacheClient" ref="newMemcachedClient"/>
	</bean>
	
	<!--基于方法的缓存切面-->
	<bean id="cacheMethodAspect" class="com.woshidaniu.spring.aop.MethodCachedAspectInterceptor">
		<property name="interceptors">
			<list>
		        <ref bean="memcachedInterceptor" />
		    </list>
		</property> 
	</bean>
	
	<!-- Spring AOP config -->
	<aop:config expose-proxy="true" proxy-target-class="true">  
        <!--  * *..service*..*(..))  -->
        <aop:aspect id="cacheAspect" ref="cacheMethodAspect">
        	<aop:pointcut id="cachePointcut" expression=" execution(* *..service..*.*(..)) or @annotation(com.woshidaniu.cache.core.annotation.CacheResult) "/>
        	<aop:before pointcut-ref="cachePointcut" method="before"/>
        	<aop:around pointcut-ref="cachePointcut" method="around"/>
        </aop:aspect>
        <aop:aspect id="updateCacheAspect" ref="cacheMethodAspect">
        	<aop:pointcut id="updateCachePointcut" expression=" execution(* *..service..*.*(..)) and @annotation(com.woshidaniu.cache.core.annotation.CacheExpire) "/>
            <aop:after-returning pointcut-ref="updateCachePointcut" method="afterReturning"  returning="returnValue" /> 
        </aop:aspect>
    </aop:config>
	
</beans>