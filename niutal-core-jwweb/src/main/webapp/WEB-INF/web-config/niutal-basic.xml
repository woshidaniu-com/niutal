<!-- 防XSS攻击过滤器 -->
<filter>
	<filter-name>xssFilter</filter-name>
	<filter-class>com.woshidaniu.safety.xss.HttpServletRequestXssFilter</filter-class>
	<!-- 默认的防XSS攻击的规则配置 -->
	<init-param>
		<param-name>safety.xss.default-policy</param-name>
		<param-value>classpath:conf/security/woshidaniu-antixss-policy.xml</param-value>
	</init-param>
	<!-- 不进行过滤请求路径的正则匹配表达式，匹配的路径不会被检测XSS;多个表达式可以用",; \t\n"中任意字符分割 -->
	<init-param>
		<param-name>safety.xss.exclude-patterns</param-name>
		<param-value>/editor/*.html</param-value>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>xssFilter</filter-name>
	<url-pattern>*.html</url-pattern>
</filter-mapping>

<!--共享文件请求过滤器 : 注意因为本过滤器中客户端是从Spring上下文获取，该过滤器需要配置在Spring初始化配置之后-->
<filter>    
	<filter-name>smbResource</filter-name>    
	<filter-class>com.woshidaniu.editor.filter.SMBResourceRequestFilter</filter-class>  
	<!-- 异常信息重定向路径 -->
    <init-param>
    	<param-name>smbclient.web.redirectURL</param-name>
    	<param-value>/WEB-INF/pages/exception/message.jsp</param-value>
    </init-param> 
</filter>    
<!-- 请求路径的正则匹配表达式，被匹配的路径将会被拦截器拦截处理  -->
<filter-mapping>    
	<filter-name>smbResource</filter-name>    
	<url-pattern>/smb/*</url-pattern>    
</filter-mapping>

<!--FTP文件请求过滤器  : 注意因为本过滤器中客户端是从Spring上下文获取，该过滤器需要配置在Spring初始化配置之后-->
<filter>    
	<filter-name>ftpResource</filter-name>    
	<filter-class>com.woshidaniu.common.web.filter.FTPResourceRequestFilter</filter-class>
	<!-- 异常信息重定向路径 -->
    <init-param>
    	<param-name>ftpclient.web.redirectURL</param-name>
    	<param-value>/WEB-INF/pages/exception/message.jsp</param-value>
    </init-param>   
</filter>    
<!-- 请求路径的正则匹配表达式，被匹配的路径将会被拦截器拦截处理  -->
<filter-mapping>    
	<filter-name>ftpResource</filter-name>    
	<url-pattern>/ftp/*</url-pattern>    
</filter-mapping>

<!--页面缓存过滤器-->
<filter>
	<description>页面缓存过滤器</description>
	<filter-name>forceCacheFilter</filter-name>
	<filter-class>com.woshidaniu.web.servlet.filter.impl.HttpServletRequestForceCacheFilter</filter-class>
	<init-param>
		<param-name>cacheSeconds</param-name>
		<param-value>604800000</param-value>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>forceCacheFilter</filter-name>
	<url-pattern>*.js</url-pattern>
</filter-mapping>
<filter-mapping>
	<filter-name>forceCacheFilter</filter-name>
	<url-pattern>*.css</url-pattern>
</filter-mapping>
<filter-mapping>
	<filter-name>forceCacheFilter</filter-name>
	<url-pattern>*.png</url-pattern>
</filter-mapping>
<filter-mapping>
	<filter-name>forceCacheFilter</filter-name>
	<url-pattern>*.gif</url-pattern>
</filter-mapping>
<filter-mapping>
	<filter-name>forceCacheFilter</filter-name>
	<url-pattern>*.woff</url-pattern>
</filter-mapping>

<!-- 全站数据压缩过滤器 -->
<filter>
	<filter-name>GzipFilter</filter-name>
	<filter-class>com.woshidaniu.web.servlet.filter.impl.HttpServletResponseGzipFilter</filter-class>
</filter>
<filter-mapping>
	<filter-name>GzipFilter</filter-name>
	<url-pattern>*.js</url-pattern>
	<dispatcher>FORWARD</dispatcher>
	<dispatcher>REQUEST</dispatcher>
</filter-mapping>
<filter-mapping>
	<filter-name>GzipFilter</filter-name>
	<url-pattern>*.css</url-pattern>
	<dispatcher>FORWARD</dispatcher>
	<dispatcher>REQUEST</dispatcher>
</filter-mapping>

<!--JS,CSS静态资源 YUI压缩 开始 : 需要放在GzipFilter之前，为了是在进行YUI压缩处理后可以正常使用gzip进行数据压缩返回 -->
<filter>
	<filter-name>YUICompressFilter</filter-name>
	<filter-class>com.woshidaniu.web.yui.WebResourceYUICompressFilter</filter-class>
	<!-- 是否Debug模式,是则不会进行js,css资源的压缩处理：该模式通常在开发时设置为true,部署时设置为false -->
	<init-param>
		<param-name>yui.debug</param-name>
		<param-value>true</param-value>
	</init-param>
	<!-- 压缩后文件的后缀前的扩展名称:当system.properties文件无yui.suffix键值对时有效 -->
	<init-param>
		<param-name>yui.suffix</param-name>
		<param-value>min</param-value>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>YUICompressFilter</filter-name>
	<url-pattern>*.js</url-pattern>
	<dispatcher>FORWARD</dispatcher>
	<dispatcher>REQUEST</dispatcher>
</filter-mapping>
<filter-mapping>
	<filter-name>YUICompressFilter</filter-name>
	<url-pattern>*.css</url-pattern>
	<dispatcher>FORWARD</dispatcher>
	<dispatcher>REQUEST</dispatcher>
</filter-mapping>
<!--JS,CSS静态资源 YUI压缩 结束 -->

<!-- Spring代理的过滤器，该过滤器指向 config-filter.xml文件中的 woshidaniuFilter -->
<filter>
	<filter-name>woshidaniuFilter</filter-name>
	<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	<init-param>
		<param-name>targetFilterLifecycle</param-name>
		<param-value>true</param-value>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>woshidaniuFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>

<!-- Struts2 框架请求处理过滤器
<filter>
	<filter-name>struts2</filter-name>
	<filter-class>com.woshidaniu.struts2.filter.ZFStrutsPrepareAndExecuteFilter</filter-class>
	<init-param>
		<param-name>config</param-name>
		<param-value>struts-default.xml,struts-plugin.xml,struts.xml</param-value>
    </init-param>
    	自定义 struts2配置文件解析器，使struts2支持通配符从jar包中读取配置，主配置名称需为根目录的struts-main.xml
    <init-param>
		<param-name>configProviders</param-name>
		<param-value>com.opensymphony.xwork2.plus.config.providers.StrutsXmlConfigurationProvider</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>struts2</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>-->

<!-- Struts2 框架 + Sitemash3 请求处理过滤器-->
<!-- 从Struts2.1.3开始应该改为以下配置才能集成起来，要不然装饰器页面或者被装饰页面里面将不能使用Struts2的标签。 -->
<filter>
   <filter-name>StrutsPrepareFilter</filter-name>
   <filter-class>com.woshidaniu.struts2.filter.ZFStrutsPrepareFilter</filter-class>
   <init-param>
		<param-name>config</param-name>
		<param-value>struts-default.xml,struts-plugin.xml,struts.xml</param-value>
    </init-param>
    <!--自定义 struts2配置文件解析器，使struts2支持通配符从jar包中读取配置，主配置名称需为根目录的struts-main.xml-->
    <init-param>
		<param-name>configProviders</param-name>
		<param-value>com.opensymphony.xwork2.plus.config.providers.StrutsXmlConfigurationProvider</param-value>
    </init-param>
</filter>
<!-- 备注：因采用独立的上下文{@com.woshidaniu.web.context.WebContext}此处仅仅需要拦截指定后缀的请求。 -->
<filter-mapping>  
    <filter-name>StrutsPrepareFilter</filter-name>  
    <url-pattern>*.action</url-pattern>  
</filter-mapping>  
<filter-mapping>  
    <filter-name>StrutsPrepareFilter</filter-name>  
    <url-pattern>*.html</url-pattern>  
</filter-mapping>

<filter>    
    <filter-name>sitemesh3</filter-name>    
    <filter-class>com.woshidaniu.web.sitemesh3.config.ParamConfigurableSiteMeshFilter</filter-class>
    <!-- 是否每个请求都重新加载配置文件：默认 true,当值为true且配置文件有改动则会重新加载配置文件 -->
    <init-param>
    	<param-name>autoReload</param-name>
    	<param-value>true</param-value>
    </init-param>
    <!-- 用于获取装饰器名称参数的取值Key -->
    <init-param>
    	<param-name>request.decorator.name</param-name>
    	<param-value>layout</param-value>
    </init-param>
     <!-- 不同参数对应的装饰页信息 -->
    <init-param>
    	<param-name>request.decorator.path</param-name>
    	<param-value>/WEB-INF/views/layouts/%s.jsp</param-value>
    </init-param>
</filter> 
<filter-mapping>    
    <filter-name>sitemesh3</filter-name>    
    <url-pattern>*.html</url-pattern>    
</filter-mapping> 
<filter>
   <filter-name>StrutsExecuteFilter</filter-name>
   <filter-class>com.woshidaniu.struts2.filter.ZFStrutsExecuteFilter</filter-class>
</filter>
<!-- 指明需要Struts2处理的请求后缀，减少不必要的逻辑运算 -->
<!-- <filter-mapping>
   <filter-name>StrutsExecuteFilter</filter-name>
   <url-pattern>/*</url-pattern>
</filter-mapping> -->
<filter-mapping>  
    <filter-name>StrutsExecuteFilter</filter-name>  
    <url-pattern>*.action</url-pattern>  
</filter-mapping>  
<filter-mapping>  
    <filter-name>StrutsExecuteFilter</filter-name>  
    <url-pattern>*.html</url-pattern>  
</filter-mapping>

<!--  文件访问处理，用于所有不想暴露路径给用户的文件访问，通过流将文件写给客户端-->
<servlet>
	<servlet-name>FileStreamServlet</servlet-name>
	<servlet-class>com.woshidaniu.common.servlet.FileStreamServlet</servlet-class>
</servlet>
<servlet-mapping>
	<servlet-name>FileStreamServlet</servlet-name>
	<url-pattern>/servlet/streamServlet</url-pattern>
</servlet-mapping>

<!-- 华中师范大学单点API -->  
<servlet>
	<servlet-name>HzsfdxLoginServlet</servlet-name>
	<servlet-class>com.woshidaniu.api.servlet.ThauthallSsoServlet</servlet-class>
	<!-- 重定向地址 -->
	<init-param>  
       <param-name>redirectURL</param-name>  
       <param-value>../xtgl/login_tickitLogin.html</param-value>  
    </init-param>  
</servlet>
<servlet-mapping>
	<servlet-name>HzsfdxLoginServlet</servlet-name>
	<url-pattern>/hzsflogin</url-pattern>
</servlet-mapping>

